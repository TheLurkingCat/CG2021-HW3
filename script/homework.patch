diff --git a/assets/shader/calculatenormal.frag b/assets/shader/calculatenormal.frag
index 8e33980..5a99ed5 100644
--- a/assets/shader/calculatenormal.frag
+++ b/assets/shader/calculatenormal.frag
@@ -15,17 +15,6 @@ void main() {
     // Note:
     //   1. Height at (x, y) = H(x, y) = sin(offset - 0.1 * y)
     //   2. A simple tranform from [-1, 1] to [0, 1] is f(x) = x * 0.5 + 0.5
-    float x = gl_FragCoord.x;
-    float y = gl_FragCoord.y;
-
-    vec3 p1 = vec3(x + delta, y + delta, sin(offset - 0.1 * (y + delta)));
-    vec3 p2 = vec3(x - delta, y + delta, sin(offset - 0.1 * (y + delta)));
-    vec3 p3 = vec3(x - delta, y - delta, sin(offset - 0.1 * (y - delta)));
-    vec3 p4 = vec3(x + delta, y - delta, sin(offset - 0.1 * (y - delta)));
-
-    vec3 n1 = normalize(cross(p2 - p1, p3 - p1));
-    vec3 n2 = normalize(cross(p3 - p1, p4 - p1));
-    vec3 n = normalize(n1 + n2) * 0.5 + 0.5;
-    normal = vec4(n, 1.0);
-    height = sin(offset - 0.1 * y) * 0.5 + 0.5;
+    normal = vec4(0.0, 0.0, 1.0, 1.0);
+    height = 0.0;
 }
diff --git a/assets/shader/fresnel.frag b/assets/shader/fresnel.frag
index 47c2fd8..4999513 100644
--- a/assets/shader/fresnel.frag
+++ b/assets/shader/fresnel.frag
@@ -30,23 +30,5 @@ void main() {
   //   3. Reflect : https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/reflect.xhtml
   //   3. Clamp   : https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/clamp.xhtml
   //   3. Mix     : https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/mix.xhtml
-  vec3 normal = normalize(fs_in.normal);
-
-  vec3 I = normalize(fs_in.position - fs_in.viewPosition.xyz);
-  vec3 R = reflect(I, normal);
-  I = normalize(I);
-
-  vec3 redTextureCoordinate = refract(I, normal, Eta.r);
-  vec3 greenTextureCoordinate = refract(I, normal, Eta.g);
-  vec3 blueTextureCoordinate = refract(I, normal, Eta.b);
-  float reflectionFactor = clamp(fresnelBias + fresnelScale * pow(1 + dot(I, normal), fresnelPower), 0.0, 1.0);
-
-  vec4 reflectColor = texture(skybox, R);
-
-  float colorRed = texture(skybox, redTextureCoordinate).r;
-  float colorGreen = texture(skybox, greenTextureCoordinate).g;
-  float colorBlue = texture(skybox, blueTextureCoordinate).b;
-  vec4 refractColor = vec4(colorRed, colorGreen, colorBlue, 1.0);
-
-  FragColor = mix(refractColor, reflectColor, reflectionFactor);
+  FragColor = vec4(0.5, 0.5, 0.5, 1.0);
 }
diff --git a/assets/shader/normalmap.frag b/assets/shader/normalmap.frag
index f675ca3..9bb7d0c 100644
--- a/assets/shader/normalmap.frag
+++ b/assets/shader/normalmap.frag
@@ -25,29 +25,7 @@ vec2 parallaxMapping(vec2 textureCoordinate, vec3 viewDirection)
   const float maxLayers = 32;
   // TODO (Bonus-Parallax): Implement occlusion parallax mapping.
   // Hint: You need to return a new texture coordinate.
-  float numLayers = mix(maxLayers, minLayers, abs(viewDirection.z));
-  float layerDepth = 1.0 / numLayers;
-  float currentLayerDepth = 0.0;
-  // Shift amount of the texture coordinates per layer.
-  vec2 P = depthScale * viewDirection.xy / viewDirection.z;
-  vec2 deltaTextureCoordinate = P / numLayers;
-  vec2  currentTextureCoordinate = textureCoordinate;
-  float currentTextureDepth = 1.0 - texture(heightTexture, currentTextureCoordinate).r;
-
-  while(currentLayerDepth < currentTextureDepth) {
-    // Shift along direction of P
-    currentTextureCoordinate -= deltaTextureCoordinate;
-    currentTextureDepth = 1.0 - texture(heightTexture, currentTextureCoordinate).r;
-    currentLayerDepth += layerDepth;
-  }
-  // get texture coordinates before collision (reverse operations)
-  vec2 prevTextureCoordinate = currentTextureCoordinate + deltaTextureCoordinate;
-  // get depth after and before collision for linear interpolation
-  float afterDepth  = currentTextureDepth - currentLayerDepth;
-  float beforeDepth = 1.0 - texture(heightTexture, prevTextureCoordinate).r - currentLayerDepth + layerDepth;
-  // interpolation of texture coordinates
-  float weight = afterDepth / (afterDepth - beforeDepth);
-  return mix(currentTextureCoordinate, prevTextureCoordinate, weight);
+  return textureCoordinate;
 }
 
 void main() {
@@ -66,15 +44,6 @@ void main() {
   //   2. Convert the value from RGB [0, 1] to normal [-1, 1], this will be inverse of what you do in calculatenormal.frag's output.
   //   3. Remember to NORMALIZE it again.
   //   4. Use Blinn-Phong shading here with parameters ks = kd = 0.75
-
-  vec3 normal = texture(normalTexture, textureCoordinate).rgb;
-  normal = normalize(normal * 2.0 - 1.0);
-  vec3 halfwayDirection = normalize(viewDirectionection - fs_in.lightDirection);
-  // Diffuse intensity
-  diffuse = 0.75 * max(dot(normal, -fs_in.lightDirection), 0.0);
-  // Specular intensity (Blinn-Phong)
-  specular = 0.75 * pow(max(dot(normal, halfwayDirection), 0.0), 8.0);
-
   float lighting = ambient + diffuse + specular;
   FragColor = vec4(lighting * diffuseColor, 1.0);
 }
diff --git a/assets/shader/normalmap.vert b/assets/shader/normalmap.vert
index f2589ff..c7f883c 100644
--- a/assets/shader/normalmap.vert
+++ b/assets/shader/normalmap.vert
@@ -34,23 +34,15 @@ layout (std140) uniform camera {
 void main() {
   // Direction of light, hard coded here for convinience.
   const vec3 lightDirection = normalize(vec3(-11.1, -24.9, 14.8));
+  vs_out.textureCoordinate = textureCoordinate_in;
   // TODO:
   //   1. Calculate the inverse of tangent space transform matrix (TBN matrix)
   //   2. Transform light direction, viewPosition, and position to the tangent space.
   //   3. (Bonus-Displacement) Query height from heightTexture.
-  vec3 T = normalize(vec3(normalMatrix * vec4(tangent_in,   0.0)));
-  vec3 B = normalize(vec3(normalMatrix * vec4(bitangent_in, 0.0)));
-  vec3 N = normalize(vec3(normalMatrix * vec4(normal_in,    0.0)));
-  // This is "inverse" of rotation matrix
-  mat3 TBN = transpose(mat3(T, B, N));
-  vs_out.lightDirection = TBN * lightDirection;
-  vs_out.viewPosition = TBN * viewPosition.xyz;
-  vs_out.position =  TBN * vec3(modelMatrix * vec4(position_in, 1.0));
-  vs_out.textureCoordinate = textureCoordinate_in;
+
   vec3 displacementVector = vec3(0);
   if (useDisplacementMapping) {
     // TODO (Bonus-Displacement): Set displacementVector, you should scale the height query from heightTexture by depthScale.
-    displacementVector = (depthScale * (texture(heightTexture, textureCoordinate_in).r * 2.0 - 1.0)) * normal_in;
   }
   gl_Position = viewProjectionMatrix * (modelMatrix * vec4(position_in + displacementVector, 1.0));
 }
diff --git a/assets/shader/skybox.vert b/assets/shader/skybox.vert
index 8c03f3b..b37c8a4 100644
--- a/assets/shader/skybox.vert
+++ b/assets/shader/skybox.vert
@@ -12,5 +12,5 @@ void main() {
   // Hint:
   //   1. We want skybox infinite far from us. So the z should be 1.0 after perspective division.
   //   2. We don't want the skybox moving when we move. So the translation in view matrix should be removed.
-  gl_Position = (projection * mat4(mat3(view)) * vec4(position_in, 1.0)).xyww;
+  gl_Position = projection * view * vec4(position_in, 1.0);
 }
